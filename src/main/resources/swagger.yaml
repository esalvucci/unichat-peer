swagger: "2.0"
info:
  version: "1.0.0"
  title: Web-Chat
  description: |
    - The Web-Chat application consists of an HTTP service functioning a central hub for multiple clients chatting by means of __chat rooms__

    - Clients can register themselves using unique usernames, addresses, and passwords
        + Upon registration, they are endowed with an [Universally unique identifier](https://it.wikipedia.org/wiki/Universally_unique_identifier) (UUID)
        + Clients can either be `admin`s or `user`s
        + Unlogged clients can chat too, but they have no explicit identity or role
        + A logged client can be referenced by means of its username, its address, or its UUID

    - Clients can create chat rooms -- thus becoming their __owners__ --, whereas other clients may __join__ -- thus becoming __members__ --, or leave such chat rooms
        + Chat rooms can be referenced by means of their name, which is assumed to be unique
        + The members of a chat room can see the whole sequence of messages published within that chat room or just a sub-sequence
        + The members of a chat room can see the whole set of members of the chat room

    - Owners can create their chat rooms with three different access levels:
        + __public__ chat rooms can be read and written by anyone, there including unlogged users: membership is unimportant here
        + __open__ chat rooms can be read and written only by their members, but any logged user can join them
        + conversely, in __private__ chat rooms only the owner can assign memberships

    - `admin`s can inspect and manage the list of registered users
        - a registered `user` can be removed either by an `admin` or by him/her self

    - The list of currently existing chat rooms is publicly available

    - Here we consider a _very trivial and **insecure**_ authentication and authorization schema:
        * upon registration, clients are assumed to provide an identifier and a password (i.e., their __credentials__), which are stored on the server side
            + the server should prevent the same identifier from being registered twice
            + clients are assumed to be registered as `user`s
            + `admin`s are __hardcoded__ into the provided implementation stub

        * when performing an HTTP request, clients are assumed to provide their credentials as a __JSON string__ contained within the __`Authorization`__ header of the request.
        The JSON string, should have one of the following forms:
            + `{ `__`"id"`__`: "uuid here", `__`"password"`__`: "password here" }`
            + or `{ `__`"username"`__`: "username here", `__`"password"`__`: "password here" }`
            + or `{ `__`"email"`__`: "email here", `__`"password"`__`: "password here" }`

        * when performing an HTTP request, clients are considered __authenticated__ if they credentials match the ones which are stored on the server side

        * when performing an HTTP request, clients are considered __authorized__ if they are authenticated _and_ they their role is enabled to perform the requested operation
host: localhost:8080
basePath: /web-chat/v1
securityDefinitions:
  credentials:
    type: apiKey
    in: header
    name: Authorization
paths:
  /rooms/{chatRoomName}/username:
    parameters: &RoomsParams
    - &RoomsNameParams
      in: path
      name: chatRoomName
      type: string
      required: true
      description: The chat room name

    post:
      parameters:
      - in: body
        name: username
        description: >
          The username to be added.

        schema:
          $ref: '#/definitions/User'
      tags:
      - username
      summary: Add a user to a particular chat room
      description: >
        Add a user to a particular chat room.
        
      operationId: addUserInChatRoom
      consumes:
      - application/json
      - application/xml
      - application/yaml
      security:
      - credentials: []
      schemes:
      - http
      responses:
        204:
          description: >
            Success.
            The user was successfully added to the chat room.
          schema:
            $ref: "#/definitions/ListOfUsers"
        409:
          description: >
            Conflict.
            The user is already a member of the chat room.

  /rooms/{chatRoomName}/{username}:
    parameters:
    - *RoomsNameParams
    - in: path
      name: username
      type: string
      required: true
      description: The chat room user's identifier (i.e. the identifier of the corresponding user)

    delete:
      tags:
      - username
      summary: Delete a particular user of a particular chat room
      description: >
        Delete a particular member of a particular chat room.
      
      operationId: removeUserFromChatRoom
      security:
      - credentials: []
      schemes:
      - http
      responses:
        204:
          description: The user was successfully deleted from the chat room


definitions:
  Link:
    type: string
    format: url
    example: www.example.com/web-chat/v1/resourceSet/resourceName
  User:
    type: object
    properties:
      username:
        type: string
        example: name.surnameN
      link:
        $ref: '#/definitions/Link'
  ListOfUsers:
    type: array
    items:
      $ref: '#/definitions/User'